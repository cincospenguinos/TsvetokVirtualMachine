# Next steps:
# * Adding label hooks
# * Ensure jnp commands has a label vs. register flag
# * Adding a variable input command of some sort. Not sure how to do that.
# * Designing an executable file format--I'm leaning towards top-down, and let
#   the compiler determine how movement should work
    bouj 5
    bouj $ak $rej5
    bouj 0
.loop
    adf 1
    bouj $ak $rej4
    difr $ak $rej5
    jnpns .end
    bouj $rej4 $ak
    jnp .loop
.end
    stoup

# The program above has
# - 11 instructions
# - 2 labels
# Each of those costs 2 bytes, making this simple loop a total of 26 bytes
# This program would take up 0.0397% of available RAM, and it just prints
# the numbers 1-5. In C it would look like this

#include<stdio.h>

int main() {
    int limit = 3;

    for (int i = 1; i <= limit; i++) {}

    return 0;
}